#!/bin/bash

PROGRAM=$(basename "$0")
USAGE="Usage: $PROGRAM [options] <filename> [<filename> ...]
Options:
    [-d|--dir dirname]             output dir, will create if doesn't exist
    [-f|--filter-nodes regex]      regular expression to filter nodes
    [-n|--dry-run]                 just show found nodes
    [-nt|--no-time]                doesn't print timestamps in output
    [-nta|--no-time-align]         doesn't align timestamps in output
    [-nts|--no-time-sort]          doesn't sort timestamps in output"

die () {
    echo "${PROGRAM}: $@"
    exit 1
}

usage () {
    echo "$USAGE"
    exit 0
}

[ $# == 0 ] && usage

export DIR=
export INPUTS=
export FILTER=
export DRYRUN=
export NOTIME=
export NOTIMEALIGN=
export NOTIMESORT=

while [ $# != 0 ]
do
	case "$1" in
        -h|--help)
            usage
            ;;
	    -d|--dir)
            [ $# -lt 2 ] && die "no dir name"
            DIR="$2"
            shift 2
            ;;
	    -f|--filter-nodes)
            [ $# -lt 2 ] && die "no filter command"
            FILTER="$2"
            shift 2
            ;;
	    -n|--dry-run)
            DRYRUN=1
            shift
            ;;
        -nt|--no-time)
            NOTIME=1
            shift
            ;;
        -nta|--no-time-align)
            NOTIMEALIGN=1
            shift
            ;;
        -nts|--no-time-sort)
            NOTIMESORT=1
            shift
            ;;
	    *)
            [ ! -f $1 ] && die "file not found" $1
            INPUTS="$INPUTS $1"
            shift
            ;;
	esac
done

orig_pattern () {
    local i="[\d]+"
    local x="[\da-f]+"
    local a="[^\s]+"
    local s="[\s]+"
    local d="\."
    echo "^$i$s$i$d$i$s$i:$i:$i$d$i$s\[$i$d$i$d$i$d$i\]$s$x$s$a$s<$a>"
}

nodetime_pattern () {
    local a="[^\s]+"
    local s="[\s]+"
    echo "^$a$s<$a>"
}

check_orig () {
    [ $(head $1 -n 100 | grep -P "$(orig_pattern)" -c) != 0 ]
}

check_nodetime () {
    [ $(head $1 -n 100 | grep -P "$(nodetime_pattern)" -c) != 0 ]
}

validate_inputs() {
    for x
    do
        check_orig $x && continue
        check_nodetime $x && continue
        die "unknown file format:" $x
    done
}

combine_tmp() {
    export tmp=$(mktemp /tmp/${PROGRAM}.XXXXXX)
    trap "{ rm -f $tmp; exit 255; }" EXIT
    for x
    do
        check_orig $x && cut -d' ' -f'8-' $x | dos2unix | grep -v '^$' >> "$tmp"
        check_nodetime $x && cat $x >> "$tmp"
    done
}

extract_nodes() {
    local nodes=$(cut -d' ' -f'1' "$tmp" | uniq | sort -u)
    [ "$FILTER" ] && nodes=$(echo "$nodes" | grep -P "$FILTER")
    echo "$nodes"
}

validate_inputs ${INPUTS}
combine_tmp ${INPUTS}

if [ "$DRYRUN" ]
then
    echo "$(extract_nodes)"
    exit 0
fi

if [ ${DIR} ]
then
    [ ! -d ${DIR} ] && mkdir ${DIR}
    awkcode='{
        if ($1 == N) print substr($0, index($0, $2))
    }'
    echo "$(extract_nodes)" |
        parallel '
            hastime=$(grep "^{} " -m1 $tmp | grep -P '"'$(nodetime_pattern)'"' -c);
            grep "^{} " $tmp |
                { [ ! ${NOTIMESORT} ] && [ ${hastime} != 0 ] && sort -s -k2,2 || cat; } |
                cut -d" " -f"2-" |
                { [ ${NOTIME} ] && [ ${hastime} != 0 ] && cut -d" " -f"2-" || cat; } > "${DIR}/{}"'
else
    if [ ${NOTIMEALIGN} ]
    then
        awkcode='{
            if (match($1, F)) print
        }'
    else
        maxlen=$(echo "$(extract_nodes)" | wc -L)
        awkcode='{
            if (match($1, F))
            {
                printf "%-"M"s ", $1
                print substr($0, index($0, $2))
            }
        }'
    fi
    awk -v F="${FILTER}" -v M="$maxlen" "$awkcode" $tmp |
        { [ ! ${NOTIMESORT} ] && sort -s -k2,2 || cat; } |
        { [ ${NOTIME} ] && sed 's/<.*T.*:.*:.*Z> //' || cat; }
fi

# todo:
# 1. --no-timestamp : remove timestamp from output
# 2. --stat : make a stat output in split (5 columns, sorting)
# *. --filter-logs
# *. --since
# *. --until
