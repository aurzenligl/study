#!/bin/bash -e

PROGRAM=$(basename "$0")
USAGE="Usage: $PROGRAM [options] <filename> [<filename> ...]
Options:
    [-d|--dir dirname]             output dir, will create if doesn't exist
    [-f|--filter-nodes command]    use favourite grep or awk combination,
                                   example: -f 'grep FCT | grep HW'
    [-n|--dry-run]                 just show found nodes"

die () {
    echo "${PROGRAM}: $@"
    exit 1
}

usage () {
    echo "$USAGE"
    exit 0
}

[ $# == 0 ] && usage

export DIR=
export INPUTS=
export FILTER=
export DRYRUN=

while [ $# != 0 ]
do
	case "$1" in
        -h|--help)
            usage
            ;;
	    -d|--dir)
            [ $# -lt 2 ] && die "no dir name"
            DIR="$2"
            shift 2
            ;;
	    -f|--filter-nodes)
            [ $# -lt 2 ] && die "no filter command"
            FILTER="$2"
            shift 2
            ;;
	    -n|--dry-run)
            DRYRUN=1
            shift
            ;;
	    *)
            [ ! -f $1 ] && die "file not found" $1
            INPUTS="$INPUTS $1"
            shift
            ;;
	esac
done

[ ${DIR} ] && [ ! -d ${DIR} ] && [ ! $DRYRUN ] && mkdir ${DIR}

export tmp=$(mktemp /tmp/${PROGRAM}.XXXXXX)
trap "{ rm -f "$tmp"; exit 255; }" EXIT
cut -d' ' -f'8-' ${INPUTS} | dos2unix > "$tmp"

nodes=$(cat "$tmp" | cut -d' ' -f'1' | sort -u | grep -v '^$')
[ "$FILTER" ] && nodes=$(echo "$nodes" | eval "$FILTER")
[ "$DRYRUN" ] && { echo "$nodes"; exit 0; }

if [ ${DIR} ]
then
    echo "$nodes" | parallel 'grep "^{} " "$tmp" | cut -d" " -f"2-" > "${DIR}/{}"'
else
    echo "$nodes" | parallel 'grep "^{} " "$tmp"'
fi

# todo:
# 1. filter by 1 column (see if it's faster than parallel grep)
# 2. sort by n-th column (and then learn to custom sort timestamps)
# 3. make a stat output in split (5 columns, sorting)
# *. --since
# *. --until
# *. --no-timestamp
# *. --stat
# *. --filter-logs
