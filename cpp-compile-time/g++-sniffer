#!/usr/bin/env python3

import os
import sys
import resource
import subprocess
from py.path import local as pypath

def find_output():
    pairs = [a for a in zip(sys.argv, sys.argv[1:])]
    return next(p[1] for p in pairs if p[0] == '-o')

def to_hdronly(filename):
    newname = filename.rsplit('.cpp', 1)[0] + '.hdronly.cpp'
    open(newname, 'w').write('\n'.join(tuple(filter(lambda line: '#include' in line, open(filename).read().splitlines()))))
    return newname

class time_child(object):
    def __init__(self, name):
        self.name = name
    def __enter__(self):
        self.start = resource.getrusage(resource.RUSAGE_CHILDREN)
        return self
    def __exit__(self, *args):
        def diff_info(i1, i2):
            sutime = (i2.ru_utime + i2.ru_stime) - (i1.ru_utime + i1.ru_stime)
            maxrss = i2.ru_maxrss
            return sutime, maxrss

        end = resource.getrusage(resource.RUSAGE_CHILDREN)
        sutime, maxrss = diff_info(self.start, end)

        lines = ['%s %.3f' % (self.name, sutime)] + [] + ['maxrss %s' % maxrss]
        self.text = ''.join(l + '\n' for l in lines)
        return False

def cmd_str():
    curdir = os.path.abspath(os.curdir)
    cmd = ' '.join(sys.argv).replace('"', '\\"').replace('(', '"(').replace(')', ')"')
    return '(cd %s && %s)\n' % (curdir, cmd)

def parse_includes(preproc):
    includes = set()
    for line in filter(lambda x: x.startswith('#'), preproc.decode().splitlines()):
        if 'include' in line:
            include = line.split()[2].strip('"')
            includes.add(include)
    return ''.join(['%s\n' % x for x in sorted(includes)])

sys.argv[0] = '/usr/bin/g++'
root_dir = pypath('/tmp/gcclog').ensure_dir()
output = find_output()

if '-c' in sys.argv:
    hdronly_path = to_hdronly(sys.argv[-1])
    gee_dir = pypath.make_numbered_dir(prefix='compile-', rootdir=root_dir, keep=0)
    with time_child(hdronly_path) as stat_hdr:
        cplt_hdr = subprocess.run(sys.argv[:-1] + [hdronly_path])
    with time_child(sys.argv[-1]) as stat:
        cplt = subprocess.run(sys.argv)
    gee_dir.join('stat').write('\n'.join([stat.text, stat_hdr.text, cmd_str()]))

    sys.argv = [a.replace(output, '/dev/stdout') for a in sys.argv] + ['-E']
    includes_cplt = subprocess.run(sys.argv, stdout=subprocess.PIPE)
    gee_dir.join('include').write('\n'.join([parse_includes(includes_cplt.stdout)]))
else:
    gee_dir = pypath.make_numbered_dir(prefix='link-', rootdir=root_dir, keep=0)
    with time_child(sys.argv[-1]) as stat:
        cplt = subprocess.run(sys.argv)
    gee_dir.join('stat').write('\n'.join([stat.text, cmd_str()]))

sys.exit(cplt.returncode)
