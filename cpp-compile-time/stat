#!/usr/bin/env python3

import os
import sys
import argparse
import numpy as np
from py.path import local as pypath

class Float(float):
    def __new__(cls, value):
       return super().__new__(cls, value)
    def __str__(self):
        return '%.3f' % float(self)

def floatize(records):
    return [[Float(e) if isinstance(e, float) else e for e in r] for r in records]

def print_table(records):
    lens = [max(len(str(r[i])) for r in records) for i in range(len(records[0]))]
    maybe_minus = [('-' if isinstance(r, str) else '') for r in records[0]]
    fmt = ' '.join('%' + m + str(l) + 's' for l, m in zip(lens, maybe_minus))

    records.insert(0, ['-' * l for l in lens])
    records.insert(0, records.pop(-1))

    for r in records:
        print(fmt % tuple(r))

def total(paths, quals, **kw):
    records = [[q(p) for q in quals] for p in paths]
    records = list(filter(lambda r: r[0] >= kw.get('threshold', 0), records))
    sums = list(np.sum(np.array(records).T, 1))
    print(' '.join([str(s) for s in sums]))

def table(paths, quals, **kw):
    records = [[filename(p)] + [q(p) for q in quals] for p in paths]
    records = floatize(sorted(records, key=lambda x: x[1], reverse=True))
    records.append(['filename'] + [q.__code__.co_name for q in quals])
    print_table(records)

def group(paths, quals, **kw):
    def bucketize(records):
        buckets = {}
        for r in records:
            if r[0].startswith(kw['prefix']):
                groupname = r[0].split(kw['prefix'])[1].split('/')[0]
                buckets.setdefault(groupname, []).append(r[1:])
        return buckets

    def recordize(buckets):
        records = []
        for name, b in buckets.items():
            count = len(b)
            means = np.mean(np.array(b).T, 1)
            records.append([name, count] + list(means))
        return records

    records = [[filename(p)] + [q(p) for q in quals] for p in paths]
    records = recordize(bucketize(records))
    records = floatize(sorted(records, key=lambda x: x[2], reverse=True))
    records.append(['group', 'file-count'] + ['mean-' + q.__code__.co_name for q in quals])
    print_table(records)

def dist(paths, quals, **kw):
    records = [[filename(p)] + [q(p) for q in quals] for p in paths]
    values = [r[1] for r in records]

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns

    sns.set_style("whitegrid")
    sns.set_color_codes("muted")

    sns.distplot(values, kde=False)

    plt.title("%s histogram" % quals[0].__code__.co_name)
    plt.xlabel(quals[0].__code__.co_name)
    plt.ylabel("file count")

    fig = plt.gcf()
    sns.despine(left=True, bottom=True)
    plt.show()


def filename(path):
    return path.join('stat').read().splitlines()[0].split()[0]

def ustime(path):
    return float(path.join('stat').read().splitlines()[0].split()[1])

def htime(path):
    return float(path.join('stat').read().splitlines()[3].split()[1])

def maxrss(path):
    return int(next(l for l in path.join('stat').read().splitlines() if l.startswith('ru_maxrss')).split()[1])

def hratio(path):
    return htime(path) / ustime(path)

def parse_options():
    parser = argparse.ArgumentParser()
    parser.add_argument('input', nargs = '*')
    parser.add_argument('--prefix', help = 'for group option')
    parser.add_argument('--threshold', type=float, default=0, help = 'filter records')
    parser.add_argument('--key', type=int, default=0, help = 'element to filter')
    return parser.parse_args()

if __name__ == "__main__":
    def usage():
        print("stat <logdir> [total|table|group|dist] [ustime|htime|maxrss|hratio]")
        sys.exit(1)

    def pop_arg(args):
        if not args:
            usage()
        return args.pop(0)

    def to_paths(arg):
        def compile_in_leaf(x):
            return str(x).rsplit('/', 1)[1].startswith('compile-') and 'current' not in str(x)

        if not os.path.isdir(arg):
            usage()
        logdir = pypath(arg)
        return [x for x in logdir.listdir() if x.isdir() and compile_in_leaf(x)]

    def to_quals(args):
        if not args:
            usage()
        opers = [ustime, htime, maxrss, hratio]
        return [next(x for x in opers if x.__code__.co_name == arg) for arg in args]

    def to_oper(arg):
        opers = [total, table, group, dist]
        return next(x for x in opers if x.__code__.co_name == arg)

    opts = parse_options()
    args = opts.input

    paths = to_paths(pop_arg(args))
    oper = to_oper(pop_arg(args))
    quals = to_quals(args)
    oper(paths, quals, prefix=opts.prefix, threshold=opts.threshold, key=opts.key)
