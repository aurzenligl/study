mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};

mo MACHINE_L -> SENSOR, WHEEL, ARM
{
    struct StateBox
    {
        repeated enum FaultStatus { Empty, Disconnected, RoofFlewOff };
        enum AdminStatus { Locked, Unlocked };
        enum AvailStatus { Online, Offline };
    };

    optional struct Core
    {
        repeated enum Types
        {
            T1,
            T2
        };

        /**
         * This is the heart of the machine.
         */
        repeated struct Numbers
        {
            int x;
            int y;
        };

        int a;
        int b;
    };

    int x;  // comment about something
    int y;  // another comment
};


